# Ownership Transfer To-Do List: Pull-Up Club

This document outlines the steps required to transfer ownership of the Pull-Up Club codebase and Supabase project, and to reconfigure it for the new owner's environment (Stripe, email services, admin accounts).

**I. Supabase Project Transfer & Reconfiguration**

  [ ] **1. Transfer Supabase Project Ownership:**
      - [ ] Identify the new Supabase account/organization to receive the project.
      - [ ] Follow Supabase's official project transfer process.
            - Ensure the new owner has appropriate permissions on their Supabase account.
            - Confirm billing transfer is handled correctly.
      - [ ] Verify the new owner can access the Supabase project dashboard.

  [ ] **2. Update Supabase Authentication Settings:**
      - [ ] **Email Templates:**
            - [ ] Review and update password reset email template (content, "from" address, branding).
            - [ ] Review and update email confirmation template.
            - [ ] Review and update magic link email template (if used).
      - [ ] **Site URL:** Update this in Supabase Auth settings to the production domain.
      - [ ] **Redirect URLs:** Verify all OAuth redirect URIs and other redirect settings are correct for the new environment.
      - [ ] **SMTP Settings (if using custom SMTP via Supabase):**
            - [ ] Update SMTP provider details (server, port, username, password) if the new owner uses a different email sending service configured directly in Supabase. *(Note: If using a separate service like Resend via Edge Functions, this is handled in Section III).*

  [ ] **3. Reconfigure Admin User Accounts:**
      - [ ] Identify new admin users and their email addresses.
      - [ ] Create user accounts for them in Supabase Auth if they don't exist.
      - [ ] Add their `user_id`s to the `admin_roles` table (or equivalent table managing admin privileges).
      - [ ] Remove old admin `user_id`s from the `admin_roles` table if they are no longer admins.
      - [ ] Test admin login and access to admin-specific functionality.

  [ ] **4. Update Environment Variables (if necessary after project transfer):**
      - [ ] Confirm if `SUPABASE_URL` and `SUPABASE_ANON_KEY` (and `SUPABASE_SERVICE_ROLE_KEY` for backend processes) remain the same after project transfer.
      - [ ] If they change, update them in all relevant environments (local `.env` files for developers, hosting provider's secrets management for deployed environments).

  [ ] **5. Review and Update Database Webhooks:**
      - [ ] Check if any webhook URLs point to specific domains that might change.
      - [ ] Verify that triggered Edge Functions are still relevant and correctly configured for the new owner's logic if any deviation exists.

  [ ] **6. Review and Update Scheduled Functions (CRON Jobs):**
      - [ ] Ensure CRON jobs (e.g., for `summon-flow`, `billing-reminders`) are correctly configured and enabled.
      - [ ] Check if any environment-specific configurations within the CRON job logic need updating.

**II. Stripe Account Reconfiguration**

  [ ] **1. Obtain New Stripe Account API Keys:**
      - [ ] New owner to provide their Stripe account's Publishable Key.
      - [ ] New owner to provide their Stripe account's Secret Key.
      - *Ensure these are from their live Stripe account when ready for production.*

  [ ] **2. Update Stripe API Keys in Environment Variables:**
      - [ ] Update `STRIPE_PUBLISHABLE_KEY` (or equivalent, e.g., `VITE_STRIPE_PUBLISHABLE_KEY` for frontend).
      - [ ] Update `STRIPE_SECRET_KEY` (used in backend/Edge Functions).
      - [ ] Update `STRIPE_WEBHOOK_SECRET` (for verifying webhook signatures).
      - *Apply these changes in all relevant environments.*

  [ ] **3. Update Stripe Product IDs and Price IDs in Configuration:**
      - [ ] New owner to create equivalent subscription products (e.g., Monthly, Annual) in their Stripe account.
      - [ ] Obtain the new Product IDs and Price IDs for these products.
      - [ ] Update these IDs in the frontend configuration (e.g., `stripe-config.ts` or similar).
      - [ ] Verify any server-side logic that references Product/Price IDs is also updated.

  [ ] **4. Reconfigure Stripe Webhook Endpoint in New Stripe Account:**
      - [ ] In the new owner's Stripe Dashboard, add a new webhook endpoint.
      - [ ] The endpoint URL should point to your deployed Supabase Function that handles Stripe webhooks (e.g., `https://<your-supabase-project-ref>.supabase.co/functions/v1/stripe-webhooks`).
      - [ ] Select the necessary events to listen to (e.g., `checkout.session.completed`, `invoice.payment_succeeded`, `invoice.payment_failed`, `customer.subscription.updated`, `customer.subscription.deleted`).
      - [ ] Obtain the new Webhook Signing Secret and update `STRIPE_WEBHOOK_SECRET` environment variable.

  [ ] **5. Test Stripe Checkout Flow:**
      - [ ] Perform a test subscription using the new Stripe configuration.
      - [ ] Ensure the checkout session is created with the new Stripe account.
      - [ ] Verify payment is processed in the new Stripe account.

  [ ] **6. Test Stripe Webhook Handling:**
      - [ ] After a test payment, confirm the `checkout.session.completed` webhook is received and processed correctly by the Supabase Function.
      - [ ] Verify user `is_paid` status, `stripe_customer_id`, and `subscriptions` table are updated correctly in your Supabase database.
      - [ ] Test other relevant webhook events if possible (e.g., cancellation, payment failure).

  [ ] **7. Plan for Existing Stripe Data Migration (if applicable):**
      - [ ] Assess if existing Stripe customer data and active subscriptions need to be migrated from the old Stripe account to the new one.
      - [ ] Consult Stripe documentation and support for best practices and feasibility of migrating this data. This can be complex.
      - [ ] If migration is necessary, develop a detailed plan and execute it carefully, coordinating with Stripe support if needed.

**III. Email Service Reconfiguration (e.g., Resend or other provider for notifications)**

  [ ] **1. Obtain New Email Service API Keys/Credentials:**
      - [ ] New owner to provide API keys for their chosen email sending service (e.g., Resend API Key).

  [ ] **2. Update Email Service API Keys in Environment Variables:**
      - [ ] Update the relevant environment variable (e.g., `RESEND_API_KEY`) in all environments.

  [ ] **3. Update "From" Email Addresses:**
      - [ ] Change the "from" email address in your Edge Functions or email sending logic to use an email address verified with the new owner's email service and domain.
      - [ ] This applies to password resets (handled by Supabase Auth settings or custom if overridden) and all application notifications (welcome emails, submission updates, etc.).

  [ ] **4. Update Email Templates (if necessary):**
      - [ ] Review email content for any branding, links, or contact information that needs to be updated for the new owner.

  [ ] **5. Test Password Reset Emails:**
      - [ ] Initiate a password reset for a test user.
      - [ ] Verify the email is sent from the new "from" address and service.
      - [ ] Verify the reset link works.

  [ ] **6. Test Notification Emails:**
      - [ ] Trigger actions that send emails (e.g., new user sign-up for welcome email, submission status change).
      - [ ] Verify emails are sent from the new "from" address and service.

**IV. Codebase Handover & Configuration**

  [ ] **1. Version Control Access (GitHub):**
      - [ ] Grant the new owner/development team access to the GitHub repository.
      - [ ] Initiate and complete the GitHub repository ownership transfer to the new owner's GitHub account/organization.
      - [ ] Remove access for individuals who should no longer have it after transfer confirmation.

  [ ] **2. Update `.env` Files / Environment Variable Management:**
      - [ ] Provide a template `.env.example` file with all required variables.
      - [ ] Instruct the new owner on setting up their local `.env` files with the new keys and IDs gathered in previous steps.
      - [ ] Ensure the new owner updates secrets in their hosting/deployment environment.

  [ ] **3. Documentation Update:**
      - [ ] Update any README files or internal documentation to reflect new setup instructions, new service accounts, or changes in configuration.
      - [ ] Document the process for managing environment variables for the new team.

  [ ] **4. Build & Deployment Process Handover:**
      - [ ] Document and walk through the current build and deployment process.
      - [ ] Ensure the new owner can successfully build and deploy the application.
      - [ ] Update any deployment scripts or CI/CD configurations if they contain environment-specific values that need to be parameterized or changed.

  [ ] **5. Transfer/Update Branding and Digital Assets:**
      - [ ] Identify all core branding assets (logos, favicons, specific fonts, marketing graphics, etc.).
      - [ ] Ensure the new owner has source files and rights to these assets.
      - [ ] Update any hardcoded URLs or references to these assets in the codebase if their hosting location changes (e.g., if they move from your CDN to the new owner's).
      - [ ] Review UI for any instances of old branding that need updating.

  [ ] **6. Conduct Knowledge Transfer Session(s):**
      - [ ] Schedule and conduct sessions with the new owner/team to walk through the codebase architecture, key functionalities, known issues or technical debt, and any non-obvious configurations or operational procedures.

**V. Testing & Validation (Post-Transfer & Reconfiguration)**

  [ ] **1. Full End-to-End User Sign-Up Flow:**
      - [ ] Create a new user account.
      - [ ] Verify email confirmation (if enabled).
  [ ] **2. Subscription Creation and Management:**
      - [ ] Test subscribing to a plan with the new Stripe setup.
      - [ ] Verify redirection to the success/profile page.
      - [ ] Check subscription status in the user profile and in the Supabase `subscriptions` table.
      - [ ] Test accessing the Stripe Customer Portal (if implemented) to manage the subscription.
  [ ] **3. Video Submission and Admin Approval/Rejection Flow:**
      - [ ] Test submitting a video as a subscribed user.
      - [ ] Test an admin user logging in and viewing pending submissions.
      - [ ] Test approving and rejecting submissions.
      - [ ] Verify status updates and notifications (if any).
  [ ] **4. Leaderboard Functionality:**
      - [ ] Verify approved submissions appear on the leaderboard.
  [ ] **5. Admin Portal Access and Functionality:**
      - [ ] Thoroughly test all admin features with a new admin account.
  [ ] **6. All Automated Email Communications:**
      - [ ] Double-check all automated emails (welcome, password reset, submission notifications, etc.) are working with the new email service.

**VI. Legal & Administrative**

  [ ] **1. Formalize Ownership Transfer Agreement (if applicable):**
      - [ ] Consult legal advice if a formal agreement is needed to document the transfer of intellectual property, assets, and responsibilities.

  [ ] **2. Update Service Account Ownership & Inventory All Third-Party Services:**
      - [ ] **Inventory:** Create a list of ALL third-party services and tools integrated with or used by the project (e.g., domain registrar, custom hosting provider if not Supabase, analytics services, logging services, error monitoring like Sentry, image/video hosting if not Supabase, CDN providers, any specific marketing tools tied to the app, etc.).
      - [ ] **Transfer/Reconfigure:** For each inventoried service:
            - [ ] Determine the plan for account ownership transfer.
            - [ ] Update billing details.
            - [ ] Reconfigure with new credentials if necessary.
            - [ ] Or, create new accounts for the new owner and configure them.

**Notes for New Owner:**
* Review all RLS policies in Supabase to ensure they understand and agree with the data access rules.
* Regularly monitor Supabase project usage and scale resources as needed.
* Keep all dependencies (npm packages, Supabase Functions, etc.) up to date for security.
* Maintain a backup and recovery plan (Supabase provides automated backups, but understand the process).
---

This list should provide a comprehensive guide for the transfer. Remember that clear communication with the new owner throughout this process is key! 